// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using Mobile.Extensions.iOS.Sources;
using UIKit;
using Fanword.Poco.Models;
using Fanword.Shared;

using Mobile.Extensions.iOS.Extensions;
using Fanword.iOS.Shared;

namespace Fanword.iOS
{
	public partial class ScoresViewController : BaseViewController
	{
		CustomListSource<ScoreModel> source;
		bool mySchools;
		bool mySports;
		bool myTeams;
		DateFilter dateFilter = DateFilter.Today;
        public string TeamId;
        public string SportId;
        public string SchoolId;
		public ScoresViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			tvScores.EstimatedRowHeight = 100;
			tvScores.RowHeight = UITableView.AutomaticDimension;
            if(string.IsNullOrEmpty(TeamId + SportId + SchoolId))
            {
				mySchools = true;
				mySports = true;
				myTeams = true;   
            }

			GetData ();
            aiActivity.Hidden = true;
			btnFilter.TouchUpInside += (sender, e) =>
			{
				var controller = Storyboard.InstantiateViewController<FollowFilterViewController> ();
				controller.MyTeams = myTeams;
				controller.MySports = mySports;
				controller.MySchools = mySchools;
				controller.SetValues = () =>
				{
					myTeams = controller.MyTeams;
					mySports = controller.MySports;
					mySchools = controller.MySchools;
					GetData ();
				};
				controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
				controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
				PresentViewController (controller, true, null);
			};

			btnPast.TouchUpInside += (sender, e) =>
			{
				dateFilter = DateFilter.Past;
				SetButtons (btnPast);
				GetData ();
			};

			btnToday.TouchUpInside += (sender, e) =>
			{
				dateFilter = DateFilter.Today;
                SetButtons (btnToday);
				GetData ();
			};

			btnUpcoming.TouchUpInside += (sender, e) =>
			{
				dateFilter = DateFilter.Upcoming;
                SetButtons (btnUpcoming);
				GetData ();
			};
            SetButtons (btnToday);


		}

		void SetButtons (UIButton button)
		{
			btnPast.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			btnToday.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			btnUpcoming.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			button.SetTitleColor (UIColor.FromRGB (21, 21, 21), UIControlState.Normal);
		}

		public void GetData ()
		{
            if (aiActivity == null)
                return;
			var filter = new ScoresFilterModel ();
			filter.FollowFilter = new FollowingFilterModel ();
			filter.FollowFilter.MySchools = mySchools;
			filter.FollowFilter.MySports = mySports;
			filter.FollowFilter.MyTeams = myTeams;
			filter.DateFilter = dateFilter;
            filter.SchoolId = SchoolId;
            filter.TeamId = TeamId;
            filter.SportId = SportId;
			filter.Today = DateTime.Now.Date.ToUniversalTime ();
            aiActivity.Hidden = false;
            aiActivity.StartAnimating();
			var apiTask = new ServiceApi ().GetScores (filter);
			apiTask.HandleError ();
			apiTask.OnSucess (response =>
			{
				if (tvScores.Source == null)
				{
					source = new CustomListSource<ScoreModel> (response.Result, GetCell, (arg1, arg2) => UITableView.AutomaticDimension);
					source.NoContentText = "No Scores";
					source.ItemClick += (sender, e) =>
                    {
                        if (!string.IsNullOrEmpty(e.EventId))
                        {
                            Navigator.GoToEventProfile(NavigationController, e.EventId);
                        }
					};

					tvScores.Source = source;
					tvScores.ReloadData ();
				}
				else
				{
					source.Items = response.Result;
					tvScores.ReloadData ();
				}
                aiActivity.Hidden = true;
			});
		}


		public UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath, ScoreModel item)
		{
			if (string.IsNullOrEmpty (item.EventId))
			{
				var cell = tableView.DequeueReusableCell ("ScoreHeaderCell", indexPath) as ScoreHeaderCell;
				cell.SetData (item, indexPath.Row);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
			}
			else
			{
				var cell = tableView.DequeueReusableCell ("ScoreCell", indexPath) as ScoreCell;
				cell.SetData (item, ShowTeamsClicked);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
			}

		}

        public void HideFilter()
        {
            btnFilter.Hidden = true;
        }

		void ShowTeamsClicked (ScoreModel item)
		{
            var controller = Storyboard.InstantiateViewController<ShowTeamsViewController>();
            controller.EventId = item.EventId;
            NavigationController.PushViewController(controller, true);
		}

        public override void ViewDidAppear(bool animated)
        {
			base.ViewDidAppear(animated);
			aiActivity.Hidden = true;
        }
	}
}
